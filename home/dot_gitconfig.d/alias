[include]
    path = ~/.gitconfig.d/gitalias.txt

[alias]
    ##
    # One letter alias for our most frequent commands.
    #
    # Guidelines: these aliases do not use options, because we want
    # these aliases to be easy to compose and use in many ways.
    ##

    r = remote

    ##
    # Short aliases for our frequent commands.
    #
    # Guidelines:
    #
    #  * Generally speaking, the alias should be in the same
    #    order as the command name followed by its options.
    #
    #    * Right: fb = foo --bar
    #    * Wrong: bf = foo --bar
    #
    #  * To write offets, use a "~" tilde character, not a "^" carat character.
    #    This is because "^" is a continuation character in DOS so won't work.
    ##

    ### add ###

    # record intent to add all files
    aai = add --all --intent-to-add

    ### branch ###

    # branch - remove merged branch
    brd = branch -d
    brdf = branch -D

    ### commit ###

    ### checkout ###

    # checkout and create new branch
    cb = checkout -b

    ### cherry-pick ###

    ### diff ###

    ### grep ###

    ### log ###

    # log key - our favorite way to show our key performance indicators, i.e. our most useful summary.
    lk = log --graph --topo-order --abbrev-commit --date=short --decorate --all --boundary --pretty=format:'%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %Cblue[%cn]%Creset'

    ## ls-files ##

    ### merge ###

    ### pull ###

    prs = !"git fetch && git rebase --autostash FETCH_HEAD"

    ### rebase ###

    # rebase - update index and continue rebase
    rbn = !git aa && git rbc

    ### reflog ###

    ### remote ###

    ### revert ###

    ### show-branch ###

    ### submodule ###

    ### status ###

    # summary status for top-level directories
    ssd = !"git status --short | sed -e 's/[/].*//' | sort -u -k 2 -k 1 #"

    ### INSPECTION ALIASES ###

    # Diffs

    # From https://gist.github.com/492227
    head = !"git log -n1"
    lost = !"git fsck | awk '/dangling commit/ {print $3}' | git show --format='SHA1: %C(yellow)%h%Creset %f' --stdin | awk '/SHA1/ {sub(\"SHA1: \", \"\"); print}'"

    ### LOG ALIASES ###

    log-graph = log --all --graph --decorate

    # Show log of changes, most recent first
    log-changes = log --oneline --reverse

    # Show log of new commits after you fetched, with stats, excluding merges
    log-commits = log ORIG_HEAD.. --stat --no-merges

    # Show log with dates in our local timezone
    log-local = log --date=local

    # Show the log for my own user email
    log-me = !git log --author $(git config user.email)

    # Show log as a graph
    log-graph = log --graph --oneline --decorate

    # Show the date of the first commit
    log-first-date = !"git log --date-order --date=iso --pretty=%ad --reverse | head -1"

    # Show the recent day
    log-day = log --since yesterday

    # Summarize your own changes since yesterday, suitable for a daily standup meeting.
    log-st = !git log --since yesterday --pretty=short --author $(git config user.email)

    log-sp = !git log --since '2 weeks ago' --pretty=short --author $(git config user.email)

    ### LOOKUP ALIASES ###

    # Show who contributed, in descending order by number of commits
    whorank = shortlog -sn --no-merges

    ### WORKFLOW ALIASES ###

    # Stash aliases
    stl = stash list
    std = stash drop
    stpu = stash push
    stpuki = stash push --keep-index
    stpo = stash pop
    stap = stash apply

    # Stash snapshot - from http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
    # Take a snapshot of your current working tree without removing changes.
    # This is handy for refactoring where you can’t quite fit what you’ve done
    # into a commit but daren’t stray too far from now without a backup.
    #
    # Running this:
    #
    #    $ git snapshot
    #
    # Creates this stash:
    #
    #    stash@{0}: On feature/handy-git-tricks: snapshot: Mon Apr 8 12:39:06 BST 2013
    #
    # And seemingly no changes to your working tree.
    #
    snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"

    ##
    # Undo & Reset
    ##

    # Nicknames
    unstage = reset HEAD

    # Delete all branches that have already been merged into the master branch.
    master-cleanse = !git master-cleanse-local; git master-cleanse-remote

    # Delete all local branches that have been merged into the local master branch.
    master-cleanse-local = "!git checkout master && git branch --merged | grep -v 'master$' | xargs git branch -d"

    # Delete all remote branches that have been merged into the remote master branch.
    master-cleanse-remote = !"git branch -r --merged origin/master | sed 's# *origin/##' | grep -v '^master$' | xargs -I% git push origin :% 2>&1 | grep --colour=never 'deleted'"

    ### SHELL SCRIPTING ALIASES ###

    # Get the current branch name
    branch-name = !"git rev-parse --abbrev-ref HEAD"

    ### MAINTENANCE ALIASES ###

    ### ADVANCED ALIASES ###

    contains = !sh -c 'git branch -a --contains $1' -

    ##########################################################################

    ##
    # Git aliases suitable for topic branches.
    #
    # These aliases are simple starting points for a simple topic flow.
    # Lots of people have lots of ideas about how to do various git flows.
    #
    # Some people like to use a topic branch for a new feature, or a
    # hotfix patch, or refactoring work, or some spike research, etc.
    # Adjust these as you like, to suit your project and/or team.
    ##

    ##########################################################################

    ##
    # Git aliases suitable for particular software integrations and tooling,
    # such as other version control system e.g. CVS, Subversion, etc.
    ##

    ### CVS ALIAS ###

    ### GitK ###

    ### Subversion ###
